generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]

  onboardingCompleted Boolean @default(false)
  userType           UserType?
  stripeCustomerId   String?  @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  company      Company?
  jobSeeker    JobSeeker?
  savedJobPosts SavedJobPost[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID        String  @unique
  userId              String  @db.ObjectId
  providerAccountId   String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  location String
  logo     String
  website  String
  xAccount String?
  about    String
  userId   String    @unique @db.ObjectId
  user     User      @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  jobPosts  JobPost[]
}

model JobSeeker {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  about   String
  resume  String
  userId  String   @unique @db.ObjectId
  user    User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  jobTitle       String
  employmentType String
  location       String
  salaryFrom     Int
  salaryTo       Int
  jobDescription String
  listingDuration Int
  benefits       String[]
  status         JobPostStatus @default(DRAFT)
  applications   Int           @default(0)

  companyId String @db.ObjectId
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  savedJobPosts SavedJobPost[]
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  jobId  String @db.ObjectId
  userId String @db.ObjectId

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}
// Modified on 2025-02-19 00:38:39
// Modified on 2025-02-19 00:55:59
